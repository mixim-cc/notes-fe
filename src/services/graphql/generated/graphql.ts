/* eslint-disable */
//This Code is auto generated by graphql-codegen, DO NOT EDIT
//You can update the queries or mutations in *.graphql to generate any new changes.
import { useMutation, useQuery, UseMutationOptions, UseQueryOptions } from '@tanstack/react-query';
import { useAxios } from './axiosHelper';
export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
  Any: unknown;
  Map: Record<string, unknown>;
};

export type Mutation = {
  note: NoteMutation;
};

export type Note = {
  children?: Maybe<Array<Maybe<Note>>>;
  containerId?: Maybe<Scalars['String']>;
  data?: Maybe<Scalars['Map']>;
  id?: Maybe<Scalars['String']>;
  parentId?: Maybe<Scalars['String']>;
  title?: Maybe<Scalars['String']>;
  type?: Maybe<NoteType>;
};

export type NoteInput = {
  containerId?: InputMaybe<Scalars['String']>;
  data?: InputMaybe<Scalars['Map']>;
  parentId?: InputMaybe<Scalars['String']>;
  title?: InputMaybe<Scalars['String']>;
};

export type NoteMutation = {
  changeParent?: Maybe<Note>;
  delete?: Maybe<Scalars['String']>;
  switchPublic?: Maybe<Scalars['String']>;
  upsertAny?: Maybe<Note>;
  upsertFolder?: Maybe<Note>;
  upsertNote?: Maybe<Note>;
};


export type NoteMutationChangeParentArgs = {
  id: Scalars['String'];
  parentId: Scalars['String'];
};


export type NoteMutationDeleteArgs = {
  id: Scalars['String'];
};


export type NoteMutationSwitchPublicArgs = {
  id: Scalars['String'];
};


export type NoteMutationUpsertAnyArgs = {
  data: NoteInput;
  id?: InputMaybe<Scalars['String']>;
  noteType: NoteType;
};


export type NoteMutationUpsertFolderArgs = {
  containerId?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['String']>;
  title: Scalars['String'];
};


export type NoteMutationUpsertNoteArgs = {
  data: NoteInput;
  id?: InputMaybe<Scalars['String']>;
};

export type NoteQuery = {
  get?: Maybe<Note>;
  getFiles?: Maybe<Array<Maybe<Note>>>;
  getTotalCount: Scalars['Int'];
  listAll?: Maybe<Array<Maybe<Note>>>;
};


export type NoteQueryGetArgs = {
  id: Scalars['String'];
};


export type NoteQueryGetFilesArgs = {
  id: Scalars['String'];
};


export type NoteQueryListAllArgs = {
  containerId?: InputMaybe<Scalars['String']>;
  search?: InputMaybe<Scalars['String']>;
};

export const NoteType = {
  File: 'FILE',
  Folder: 'FOLDER'
} as const;

export type NoteType = typeof NoteType[keyof typeof NoteType];
export type Query = {
  note: NoteQuery;
};

export type Subscription = {
  getNote: Note;
};


export type SubscriptionGetNoteArgs = {
  noteId: Scalars['String'];
  subscriberId: Scalars['String'];
};

export type AddNoteMutationVariables = Exact<{
  data: NoteInput;
}>;


export type AddNoteMutation = { note: { upsertNote?: { data?: Record<string, unknown> | null, title?: string | null, parentId?: string | null, id?: string | null, containerId?: string | null } | null } };

export type UpsertAnyMutationVariables = Exact<{
  data: NoteInput;
  id?: InputMaybe<Scalars['String']>;
  noteType: NoteType;
}>;


export type UpsertAnyMutation = { note: { upsertAny?: { data?: Record<string, unknown> | null, id?: string | null, parentId?: string | null, title?: string | null, type?: NoteType | null } | null } };

export type MakeNotePublicMutationVariables = Exact<{
  id: Scalars['String'];
}>;


export type MakeNotePublicMutation = { note: { switchPublic?: string | null } };

export type GetStructureRootQueryVariables = Exact<{ [key: string]: never; }>;


export type GetStructureRootQuery = { note: { listAll?: Array<{ id?: string | null, title?: string | null, type?: NoteType | null, parentId?: string | null } | null> | null } };

export type GetStructureChildQueryVariables = Exact<{
  parentId: Scalars['String'];
}>;


export type GetStructureChildQuery = { note: { getFiles?: Array<{ id?: string | null, parentId?: string | null, title?: string | null, type?: NoteType | null } | null> | null } };

export type GetNoteQueryVariables = Exact<{
  id: Scalars['String'];
}>;


export type GetNoteQuery = { note: { get?: { id?: string | null, title?: string | null, data?: Record<string, unknown> | null } | null } };


export const AddNoteDocument = `
    mutation addNote($data: NoteInput!) {
  note {
    upsertNote(data: $data) {
      data
      title
      parentId
      id
      containerId
    }
  }
}
    `;
export const useAddNoteMutation = <
      TError = unknown,
      TContext = unknown
    >(options?: UseMutationOptions<AddNoteMutation, TError, AddNoteMutationVariables, TContext>) =>
    useMutation<AddNoteMutation, TError, AddNoteMutationVariables, TContext>(
      ['addNote'],
      useAxios<AddNoteMutation, AddNoteMutationVariables>(AddNoteDocument),
      options
    );
useAddNoteMutation.getKey = () => ['addNote'];

export const UpsertAnyDocument = `
    mutation upsertAny($data: NoteInput!, $id: String, $noteType: NoteType!) {
  note {
    upsertAny(data: $data, id: $id, noteType: $noteType) {
      data
      id
      parentId
      title
      type
    }
  }
}
    `;
export const useUpsertAnyMutation = <
      TError = unknown,
      TContext = unknown
    >(options?: UseMutationOptions<UpsertAnyMutation, TError, UpsertAnyMutationVariables, TContext>) =>
    useMutation<UpsertAnyMutation, TError, UpsertAnyMutationVariables, TContext>(
      ['upsertAny'],
      useAxios<UpsertAnyMutation, UpsertAnyMutationVariables>(UpsertAnyDocument),
      options
    );
useUpsertAnyMutation.getKey = () => ['upsertAny'];

export const MakeNotePublicDocument = `
    mutation makeNotePublic($id: String!) {
  note {
    switchPublic(id: $id)
  }
}
    `;
export const useMakeNotePublicMutation = <
      TError = unknown,
      TContext = unknown
    >(options?: UseMutationOptions<MakeNotePublicMutation, TError, MakeNotePublicMutationVariables, TContext>) =>
    useMutation<MakeNotePublicMutation, TError, MakeNotePublicMutationVariables, TContext>(
      ['makeNotePublic'],
      useAxios<MakeNotePublicMutation, MakeNotePublicMutationVariables>(MakeNotePublicDocument),
      options
    );
useMakeNotePublicMutation.getKey = () => ['makeNotePublic'];

export const GetStructureRootDocument = `
    query getStructureRoot {
  note {
    listAll {
      id
      title
      type
      parentId
    }
  }
}
    `;
export const useGetStructureRootQuery = <
      TData = GetStructureRootQuery,
      TError = unknown
    >(
      variables?: GetStructureRootQueryVariables,
      options?: UseQueryOptions<GetStructureRootQuery, TError, TData>
    ) =>
    useQuery<GetStructureRootQuery, TError, TData>(
      variables === undefined ? ['getStructureRoot'] : ['getStructureRoot', variables],
      useAxios<GetStructureRootQuery, GetStructureRootQueryVariables>(GetStructureRootDocument).bind(null, variables),
      options
    );
useGetStructureRootQuery.document = GetStructureRootDocument;

export const GetStructureChildDocument = `
    query getStructureChild($parentId: String!) {
  note {
    getFiles(id: $parentId) {
      id
      parentId
      title
      type
    }
  }
}
    `;
export const useGetStructureChildQuery = <
      TData = GetStructureChildQuery,
      TError = unknown
    >(
      variables: GetStructureChildQueryVariables,
      options?: UseQueryOptions<GetStructureChildQuery, TError, TData>
    ) =>
    useQuery<GetStructureChildQuery, TError, TData>(
      ['getStructureChild', variables],
      useAxios<GetStructureChildQuery, GetStructureChildQueryVariables>(GetStructureChildDocument).bind(null, variables),
      options
    );
useGetStructureChildQuery.document = GetStructureChildDocument;

export const GetNoteDocument = `
    query getNote($id: String!) {
  note {
    get(id: $id) {
      id
      title
      data
    }
  }
}
    `;
export const useGetNoteQuery = <
      TData = GetNoteQuery,
      TError = unknown
    >(
      variables: GetNoteQueryVariables,
      options?: UseQueryOptions<GetNoteQuery, TError, TData>
    ) =>
    useQuery<GetNoteQuery, TError, TData>(
      ['getNote', variables],
      useAxios<GetNoteQuery, GetNoteQueryVariables>(GetNoteDocument).bind(null, variables),
      options
    );
useGetNoteQuery.document = GetNoteDocument;
